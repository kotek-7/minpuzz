# ローカル開発環境用 Docker Compose
# Supabase: 独立で `supabase start` を使用
# 本番環境: 各サービスを個別にデプロイ（Vercel, Render）

version: '3.8'

services:
  # Redis セッション管理用
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - minpuzz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API Server (開発用)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: deps  # Use deps stage which has pnpm and dependencies
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:54322/postgres
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=http://host.docker.internal:54321
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/tsconfig.json:/app/tsconfig.json:ro
      - backend_node_modules:/app/node_modules
    command: ["pnpm", "dev"]
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - minpuzz-network

  # Frontend Next.js Application (開発用)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: deps  # Use deps stage which has pnpm and dependencies
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - WATCHPACK_POLLING=true
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/next.config.ts:/app/next.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/postcss.config.mjs:/app/postcss.config.mjs:ro
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    command: ["pnpm", "dev"]
    depends_on:
      - backend
    networks:
      - minpuzz-network

volumes:
  redis_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local

networks:
  minpuzz-network:
    driver: bridge