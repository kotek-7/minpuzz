%%{init: {'theme':'default', 'themeVariables': {'primaryColor': '#4f46e5', 'primaryTextColor': '#fff', 'primaryBorderColor': '#3730a3', 'lineColor': '#374151', 'secondaryColor': '#e5e7eb', 'tertiaryColor': '#f3f4f6'}}}%%

%% ゲーム中（通常操作：選択→セルクリック→設置→進捗更新）
sequenceDiagram
    participant U1 as ユーザー1
    participant F1 as フロントエンド1
    participant B as バックエンド
    participant R as Redis
    participant F2 as フロントエンド2
    participant U2 as ユーザー2

    Note over U1,U2: game-start 受信直後からのゲーム操作（自チーム詳細・相手は進捗のみ）

    %% 再接続/同期ずれ時のスナップショット再取得
    alt 再接続 or 同期ずれ検知
        U1->>F1: 再同期ボタン/自動検知
        F1->>B: Socket emit: request-game-init {matchId,teamId,userId}
        Note over B: 軽量レート制限（~500ms/ソケット）
        B-->>F1: state-sync {board,pieces,score,timer?,matchStatus}
        F1->>F1: ローカル状態を上書き（安全に復元）
    end

    U1->>F1: ピースを選択(pieceId)
    U1->>F1: 盤面セルをクリック(row,col)
    F1->>B: Socket emit: piece-place {matchId,teamId,userId,pieceId,row,col}
    B->>R: 検証（未配置/盤内/セル未占有/（任意）正解セル）
    alt 設置成功
        B->>R: 盤面確定・スコア+1
        B->>F1: Socket to team room: piece-placed {pieceId,row,col,byUserId}
        Note over B: 進捗は public に最小限を通知
        B->>F1: Socket to public: progress-update {placedByTeam}
    else 不正/範囲外/占有
        B-->>F1: piece-place-denied {pieceId, reason}
    end

    Note over U1,U2: 次: docs/sequence-game-end.mmd（ゲーム終了フロー）
