%%{init: {'theme':'default', 'themeVariables': {'primaryColor': '#4f46e5', 'primaryTextColor': '#fff', 'primaryBorderColor': '#3730a3', 'lineColor': '#374151', 'secondaryColor': '#e5e7eb', 'tertiaryColor': '#f3f4f6'}}}%%

%% 同時配置競合（先着優先）
sequenceDiagram
    participant U1 as ユーザー1
    participant F1 as フロントエンド1
    participant B as バックエンド
    participant R as Redis
    participant F2 as フロントエンド2
    participant U2 as ユーザー2

    par 同時に
        U1->>F1: ピースを選択→セル(row,col)クリック
        F1->>B: piece-place {matchId,teamId:TA,userId:U1,pieceId:Px,row:0,col:0}
        U2->>F2: ピースを選択→同じセル(row,col)クリック
        F2->>B: piece-place {matchId,teamId:TA,userId:U2,pieceId:Py,row:0,col:0}
    end
    Note over B: 未配置/盤内/セル未占有を原子的に検証→保存
    alt U1が先に成功
        B->>F1: Socket to team room: piece-placed {pieceId:Px,row:0,col:0,byUserId:U1}
        B-->>F2: piece-place-denied {pieceId:Py, reason:'invalidCell'}
    else U2が先に成功
        B->>F2: Socket to team room: piece-placed {pieceId:Py,row:0,col:0,byUserId:U2}
        B-->>F1: piece-place-denied {pieceId:Px, reason:'invalidCell'}
    end
